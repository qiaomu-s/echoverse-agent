# .github/workflows/auto-pr.yml
name: Auto Create PR on Main Push

on:
  push:
    branches: [main] # Trigger on push to main

jobs:
  create_pr: # Renamed job for clarity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for version comparison

      - name: Print working directory # Kept for debugging
        run: |
          pwd
          ls -la

      - name: Get basic info from manifest # Changed step name and content
        id: get_basic_info
        run: |
          PLUGIN_NAME=$(grep "^name:" manifest.yaml | cut -d' ' -f2)
          echo "Plugin name: $PLUGIN_NAME"
          echo "plugin_name=$PLUGIN_NAME" >> $GITHUB_OUTPUT

          VERSION=$(grep "^version:" manifest.yaml | cut -d' ' -f2)
          echo "Plugin version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # If the author's name is not your github username, you can change the author here
          AUTHOR=$(grep "^author:" manifest.yaml | cut -d' ' -f2)
          echo "Plugin author: $AUTHOR"
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT

      - name: Check version changes
        id: check_version
        run: |
          CURRENT_VERSION="${{ steps.get_basic_info.outputs.version }}"
          echo "Current version: $CURRENT_VERSION"

          # Get the latest tag (if any)
          LATEST_TAG=$(git tag -l --sort=-version:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, proceeding with first release"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "latest_version=none" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (remove 'v' prefix if present)
            LATEST_VERSION=$(echo $LATEST_TAG | sed 's/^v//')
            echo "Latest version: $LATEST_VERSION"
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              echo "Version changed from $LATEST_VERSION to $CURRENT_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged ($CURRENT_VERSION), skipping build"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Download CLI tool
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          # Create bin directory in runner temp
          mkdir -p $RUNNER_TEMP/bin
          cd $RUNNER_TEMP/bin

          # Download CLI tool
          wget https://github.com/langgenius/dify-plugin-daemon/releases/download/0.1.2/dify-plugin-linux-amd64
          chmod +x dify-plugin-linux-amd64

          # Show download location and file
          echo "CLI tool location:"
          pwd
          ls -la dify-plugin-linux-amd64

      - name: Package Plugin
        if: steps.check_version.outputs.version_changed == 'true'
        id: package
        run: |
          # Use the downloaded CLI tool to package
          cd $GITHUB_WORKSPACE
          # Use variables for package name
          PACKAGE_NAME="${{ steps.get_basic_info.outputs.plugin_name }}-${{ steps.get_basic_info.outputs.version }}.difypkg"
          # Use CLI from runner temp
          $RUNNER_TEMP/bin/dify-plugin-linux-amd64 plugin package . -o "$PACKAGE_NAME"

          # Show packaging result
          echo "Package result:"
          ls -la "$PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Show full file path and directory structure (kept for debugging)
          echo "\\nFull file path:"
          pwd
          echo "\\nDirectory structure:"
          tree || ls -R

      - name: Create tag and GitHub Release
        if: steps.check_version.outputs.version_changed == 'true'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PLUGIN_ACTION }}
        run: |
          # Configure git for tagging
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Create tag with version from manifest
          TAG_NAME="v${{ steps.get_basic_info.outputs.version }}"
          PACKAGE_NAME="${{ steps.package.outputs.package_name }}"

          echo "Creating tag: $TAG_NAME"
          echo "Package file: $PACKAGE_NAME"

          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, skipping tag and release creation"
          else
            # Create and push tag using the configured token
            git remote set-url origin "https://x-access-token:${{ secrets.PLUGIN_ACTION }}@github.com/${{ github.repository }}.git"
            git tag -a "$TAG_NAME" -m "Release ${{ steps.get_basic_info.outputs.plugin_name }} version ${{ steps.get_basic_info.outputs.version }}"
            git push origin "$TAG_NAME"
            echo "Tag $TAG_NAME created and pushed"
            
            # Create GitHub Release with the plugin package
            gh release create "$TAG_NAME" \
              --title "Release ${{ steps.get_basic_info.outputs.plugin_name }} ${{ steps.get_basic_info.outputs.version }}" \
              --notes "自动发布 ${{ steps.get_basic_info.outputs.plugin_name }} 插件版本 ${{ steps.get_basic_info.outputs.version }}

            ## 更新内容
            - 插件包文件: \`$PACKAGE_NAME\`
            - 版本: ${{ steps.get_basic_info.outputs.version }}
            
            ## 安装方法
            1. 下载 \`$PACKAGE_NAME\` 文件
            2. 在Dify中上传并安装插件包
            " \
              "$PACKAGE_NAME"
            
            echo "GitHub Release created with plugin package"
            echo "release_created=true" >> $GITHUB_OUTPUT
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Checkout target repo
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/checkout@v3
        with:
          # Use author variable for repository
          repository: ${{steps.get_basic_info.outputs.author}}/dify-plugins
          path: dify-plugins
          token: ${{ secrets.PLUGIN_ACTION }}
          fetch-depth: 1 # Fetch only the last commit to speed up checkout
          persist-credentials: true # Persist credentials for subsequent git operations

      - name: Prepare and create PR
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          # Debug info (kept)
          echo "Debug: Current directory $(pwd)"
          # Use variable for package name
          PACKAGE_NAME="${{ steps.get_basic_info.outputs.plugin_name }}-${{ steps.get_basic_info.outputs.version }}.difypkg"
          echo "Debug: Package name: $PACKAGE_NAME"
          ls -la

          # Move the packaged file to the target directory using variables
          mkdir -p dify-plugins/${{ steps.get_basic_info.outputs.author }}/${{ steps.get_basic_info.outputs.plugin_name }}
          mv "$PACKAGE_NAME" dify-plugins/${{ steps.get_basic_info.outputs.author }}/${{ steps.get_basic_info.outputs.plugin_name }}/

          # Enter the target repository directory
          cd dify-plugins

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Ensure we are on the latest main branch
          git fetch origin main
          git checkout main
          git pull origin main

          # Create and switch to a new branch using variables and new naming convention
          BRANCH_NAME="bump-${{ steps.get_basic_info.outputs.plugin_name }}-plugin-${{ steps.get_basic_info.outputs.version }}"
          git checkout -b "$BRANCH_NAME"

          # Add and commit changes (using git add .)
          git add .
          git status # for debugging
          # Use variables in commit message
          git commit -m "bump ${{ steps.get_basic_info.outputs.plugin_name }} plugin to version ${{ steps.get_basic_info.outputs.version }}"

          # Push to remote (use force just in case the branch existed before from a failed run)
          git push -u origin "$BRANCH_NAME" --force

          # Confirm branch has been pushed and wait for sync (GitHub API might need a moment)
          git branch -a
          echo "Waiting for branch to sync..."
          sleep 10  # Wait 10 seconds for branch sync

      - name: Create PR via GitHub API
        if: steps.check_version.outputs.version_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.PLUGIN_ACTION }} # Use the provided token for authentication
        run: |
          gh pr create \
            --repo langgenius/dify-plugins \
            --head "${{ steps.get_basic_info.outputs.author }}:${{ steps.get_basic_info.outputs.plugin_name }}-${{ steps.get_basic_info.outputs.version }}" \
            --base main \
            --title "bump ${{ steps.get_basic_info.outputs.plugin_name }} plugin to version ${{ steps.get_basic_info.outputs.version }}" \
            --body "bump ${{ steps.get_basic_info.outputs.plugin_name }} plugin package to version ${{ steps.get_basic_info.outputs.version }}

            Changes:
            - Updated plugin package file" || echo "PR already exists or creation skipped." # Handle cases where PR already exists

      - name: Print environment info # Kept for debugging
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Current directory contents:"
          ls -R
          echo "Version check result: ${{ steps.check_version.outputs.version_changed }}"
          echo "Current version: ${{ steps.get_basic_info.outputs.version }}"
          echo "Latest version: ${{ steps.check_version.outputs.latest_version }}"
